
Smart_Car.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000232  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800100  00800100  000002a6  2**0
                  ALLOC
  2 .comment      00000030  00000000  00000000  000002a6  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000128  00000000  00000000  000002d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000107a  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005f0  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000008d6  00000000  00000000  00001a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002c0  00000000  00000000  00002340  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000424  00000000  00000000  00002600  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000007e9  00000000  00000000  00002a24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000e8  00000000  00000000  0000320d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	ac c0       	rjmp	.+344    	; 0x1d2 <__vector_30>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e3       	ldi	r30, 0x32	; 50
  a0:	f2 e0       	ldi	r31, 0x02	; 2
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 30       	cpi	r26, 0x00	; 0
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e0       	ldi	r26, 0x00	; 0
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a1 30       	cpi	r26, 0x01	; 1
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	84 d0       	rcall	.+264    	; 0x1cc <main>
  c4:	b4 c0       	rjmp	.+360    	; 0x22e <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <Bluetooth_Init>:
	
}

void Bluetooth_transmit_byte(UINT8 data_byte)
{
	UART1_sendByte(data_byte);
  c8:	65 d0       	rcall	.+202    	; 0x194 <UART1_init>
  ca:	8b 9a       	sbi	0x11, 3	; 17
  cc:	8a 98       	cbi	0x11, 2	; 17
  ce:	08 95       	ret

000000d0 <Bluetooth_receive_byte>:
}

UINT8 Bluetooth_receive_byte(void)
{
	return UART1_recieveByte();
  d0:	75 c0       	rjmp	.+234    	; 0x1bc <UART1_recieveByte>
}
  d2:	08 95       	ret

000000d4 <LCD_SendCMD>:
		LCD_SendCMD(0xC0 + col -1);
	}
}
void LCD_SendCMD(UINT8 cmd){
	/* RS, RW */
	clearBit(LCD_CONTROL_PORT,LCD_RS);	/* Command */
  d4:	c5 98       	cbi	0x18, 5	; 24
	clearBit(LCD_CONTROL_PORT,LCD_RW);	/* Write */
  d6:	c6 98       	cbi	0x18, 6	; 24
	
	/* Write cmd high nipple */
	//LCD_DATA_PORT = ((LCD_DATA_PORT&0x0F)|(cmd&0xF0));
	LCD_PORT.HN = (cmd>>4);
  d8:	28 2f       	mov	r18, r24
  da:	20 7f       	andi	r18, 0xF0	; 240
  dc:	95 b3       	in	r25, 0x15	; 21
  de:	9f 70       	andi	r25, 0x0F	; 15
  e0:	92 2b       	or	r25, r18
  e2:	95 bb       	out	0x15, r25	; 21
	/* Start Write Operation */
	setBit(LCD_CONTROL_PORT,LCD_EN);
  e4:	c7 9a       	sbi	0x18, 7	; 24
	clearBit(LCD_CONTROL_PORT,LCD_EN);
  e6:	c7 98       	cbi	0x18, 7	; 24
	
	/* Write cmd low nipple */
	//LCD_DATA_PORT = ((LCD_DATA_PORT&0x0F)|(cmd<<4));
	LCD_PORT.HN = cmd;
  e8:	82 95       	swap	r24
  ea:	80 7f       	andi	r24, 0xF0	; 240
  ec:	95 b3       	in	r25, 0x15	; 21
  ee:	9f 70       	andi	r25, 0x0F	; 15
  f0:	89 2b       	or	r24, r25
  f2:	85 bb       	out	0x15, r24	; 21
	/* Start Write Operation */
	setBit(LCD_CONTROL_PORT,LCD_EN);
  f4:	c7 9a       	sbi	0x18, 7	; 24
	clearBit(LCD_CONTROL_PORT,LCD_EN);
  f6:	c7 98       	cbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	8a e6       	ldi	r24, 0x6A	; 106
  fa:	8a 95       	dec	r24
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_SendCMD+0x26>
  fe:	00 c0       	rjmp	.+0      	; 0x100 <LCD_SendCMD+0x2c>
 100:	08 95       	ret

00000102 <LCD_Init>:

#include "IncludeAll.h"

void LCD_Init(void){
	/* Control Pins as Output */
	setBits(LCD_CONTROL_DDR,LCD_CONTROL_MASK);
 102:	87 b3       	in	r24, 0x17	; 23
 104:	80 6e       	ori	r24, 0xE0	; 224
 106:	87 bb       	out	0x17, r24	; 23
	clearBits(LCD_CONTROL_PORT,LCD_CONTROL_MASK);
 108:	88 b3       	in	r24, 0x18	; 24
 10a:	8f 71       	andi	r24, 0x1F	; 31
 10c:	88 bb       	out	0x18, r24	; 24
	/* Data Pins as Output */
	setBits(LCD_DATA_DDR,LCD_DATA_MASK);
 10e:	84 b3       	in	r24, 0x14	; 20
 110:	80 6f       	ori	r24, 0xF0	; 240
 112:	84 bb       	out	0x14, r24	; 20
	clearBits(LCD_DATA_PORT,LCD_DATA_MASK);
 114:	85 b3       	in	r24, 0x15	; 21
 116:	8f 70       	andi	r24, 0x0F	; 15
 118:	85 bb       	out	0x15, r24	; 21
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	8f e3       	ldi	r24, 0x3F	; 63
 11c:	9c e9       	ldi	r25, 0x9C	; 156
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Init+0x1c>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Init+0x22>
 124:	00 00       	nop
	_delay_ms(20);			/* LCD Power on delay */
	LCD_SendCMD(0x28);		/* 4-bit, 5*8 font, 2 lines */
 126:	88 e2       	ldi	r24, 0x28	; 40
 128:	d5 df       	rcall	.-86     	; 0xd4 <LCD_SendCMD>
	LCD_SendCMD(0x0C);		/* Display on, cursor off, blink off */
 12a:	8c e0       	ldi	r24, 0x0C	; 12
 12c:	d3 df       	rcall	.-90     	; 0xd4 <LCD_SendCMD>
	LCD_SendCMD(0x06);		/* Automatic Increment */
 12e:	86 e0       	ldi	r24, 0x06	; 6
 130:	d1 df       	rcall	.-94     	; 0xd4 <LCD_SendCMD>
	LCD_SendCMD(0x01);		/* Clear Display */
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	cf df       	rcall	.-98     	; 0xd4 <LCD_SendCMD>
 136:	8f e0       	ldi	r24, 0x0F	; 15
 138:	97 e2       	ldi	r25, 0x27	; 39
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCD_Init+0x38>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <LCD_Init+0x3e>
 140:	00 00       	nop
 142:	08 95       	ret

00000144 <LCD_GotoRC>:
	_delay_ms(5);			/* Clear Display Time */
}
void LCD_GotoRC(UINT8 row, UINT8 col){
	if (row == 1)
 144:	81 30       	cpi	r24, 0x01	; 1
 146:	21 f4       	brne	.+8      	; 0x150 <LCD_GotoRC+0xc>
	{
		LCD_SendCMD(0x80 + col -1);
 148:	8f e7       	ldi	r24, 0x7F	; 127
 14a:	86 0f       	add	r24, r22
 14c:	c3 cf       	rjmp	.-122    	; 0xd4 <LCD_SendCMD>
 14e:	08 95       	ret
	}
	else
	{
		LCD_SendCMD(0xC0 + col -1);
 150:	8f eb       	ldi	r24, 0xBF	; 191
 152:	86 0f       	add	r24, r22
 154:	bf cf       	rjmp	.-130    	; 0xd4 <LCD_SendCMD>
 156:	08 95       	ret

00000158 <LCD_SendChar>:
	_delay_us(40);
}

void LCD_SendChar(UINT8 data){
	/* RS, RW */
	setBit(LCD_CONTROL_PORT,LCD_RS);	/* Data */
 158:	c5 9a       	sbi	0x18, 5	; 24
	clearBit(LCD_CONTROL_PORT,LCD_RW);	/* Write */
 15a:	c6 98       	cbi	0x18, 6	; 24
	
	/* Write cmd high nibble */
	//LCD_DATA_PORT = ((LCD_DATA_PORT&0x0F)|(data&0xF0));
	LCD_PORT.HN = (data>>4);
 15c:	28 2f       	mov	r18, r24
 15e:	20 7f       	andi	r18, 0xF0	; 240
 160:	95 b3       	in	r25, 0x15	; 21
 162:	9f 70       	andi	r25, 0x0F	; 15
 164:	92 2b       	or	r25, r18
 166:	95 bb       	out	0x15, r25	; 21
	/* Start Write Operation */
	setBit(LCD_CONTROL_PORT,LCD_EN);
 168:	c7 9a       	sbi	0x18, 7	; 24
	clearBit(LCD_CONTROL_PORT,LCD_EN);
 16a:	c7 98       	cbi	0x18, 7	; 24
	
	/* Write cmd low nibble */
	//LCD_DATA_PORT = ((LCD_DATA_PORT&0x0F)|(data<<4));
	LCD_PORT.HN = data;
 16c:	82 95       	swap	r24
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	95 b3       	in	r25, 0x15	; 21
 172:	9f 70       	andi	r25, 0x0F	; 15
 174:	89 2b       	or	r24, r25
 176:	85 bb       	out	0x15, r24	; 21
	/* Start Write Operation */
	setBit(LCD_CONTROL_PORT,LCD_EN);
 178:	c7 9a       	sbi	0x18, 7	; 24
	clearBit(LCD_CONTROL_PORT,LCD_EN);
 17a:	c7 98       	cbi	0x18, 7	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 17c:	8a e6       	ldi	r24, 0x6A	; 106
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <LCD_SendChar+0x26>
 182:	00 c0       	rjmp	.+0      	; 0x184 <LCD_SendChar+0x2c>
 184:	08 95       	ret

00000186 <LCD_SendCharRC>:
	
	/* cmd time delay */
	_delay_us(40);
}
void LCD_SendCharRC(UINT8 row, UINT8 col,UINT8 ch){
 186:	cf 93       	push	r28
 188:	c4 2f       	mov	r28, r20
	LCD_GotoRC(row,col);
 18a:	dc df       	rcall	.-72     	; 0x144 <LCD_GotoRC>
	LCD_SendChar(ch);
 18c:	8c 2f       	mov	r24, r28
 18e:	e4 df       	rcall	.-56     	; 0x158 <LCD_SendChar>
}
 190:	cf 91       	pop	r28
 192:	08 95       	ret

00000194 <UART1_init>:
}
void UART1_sendByte(const UINT8 data)
{
	while(readBit(UCSR1A,UDRE1) ==0 ){}

	UDR1 = data;
 194:	f8 94       	cli
 196:	10 92 9b 00 	sts	0x009B, r1
 19a:	ea e9       	ldi	r30, 0x9A	; 154
 19c:	f0 e0       	ldi	r31, 0x00	; 0
 19e:	80 81       	ld	r24, Z
 1a0:	88 69       	ori	r24, 0x98	; 152
 1a2:	80 83       	st	Z, r24
 1a4:	ed e9       	ldi	r30, 0x9D	; 157
 1a6:	f0 e0       	ldi	r31, 0x00	; 0
 1a8:	80 81       	ld	r24, Z
 1aa:	86 60       	ori	r24, 0x06	; 6
 1ac:	80 83       	st	Z, r24
 1ae:	10 92 98 00 	sts	0x0098, r1
 1b2:	83 e3       	ldi	r24, 0x33	; 51
 1b4:	80 93 99 00 	sts	0x0099, r24
 1b8:	78 94       	sei
 1ba:	08 95       	ret

000001bc <UART1_recieveByte>:

}
UINT8 UART1_recieveByte(void)
{

	while(readBit(UCSR1A,RXC1) ==0 ){}
 1bc:	eb e9       	ldi	r30, 0x9B	; 155
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	80 81       	ld	r24, Z
 1c2:	88 23       	and	r24, r24
 1c4:	ec f7       	brge	.-6      	; 0x1c0 <UART1_recieveByte+0x4>
	
	return UDR1;
 1c6:	80 91 9c 00 	lds	r24, 0x009C
}
 1ca:	08 95       	ret

000001cc <main>:

volatile UINT8 startAutoParking;

int main(void)
{
	LCD_Init();
 1cc:	9a df       	rcall	.-204    	; 0x102 <LCD_Init>
	Bluetooth_Init();
 1ce:	7c df       	rcall	.-264    	; 0xc8 <Bluetooth_Init>
 1d0:	ff cf       	rjmp	.-2      	; 0x1d0 <main+0x4>

000001d2 <__vector_30>:
				
    }
}

ISR(USART1_RX_vect)
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	0b b6       	in	r0, 0x3b	; 59
 1de:	0f 92       	push	r0
 1e0:	2f 93       	push	r18
 1e2:	3f 93       	push	r19
 1e4:	4f 93       	push	r20
 1e6:	5f 93       	push	r21
 1e8:	6f 93       	push	r22
 1ea:	7f 93       	push	r23
 1ec:	8f 93       	push	r24
 1ee:	9f 93       	push	r25
 1f0:	af 93       	push	r26
 1f2:	bf 93       	push	r27
 1f4:	ef 93       	push	r30
 1f6:	ff 93       	push	r31
	startAutoParking = Bluetooth_receive_byte();
 1f8:	6b df       	rcall	.-298    	; 0xd0 <Bluetooth_receive_byte>
 1fa:	80 93 00 01 	sts	0x0100, r24
	LCD_SendCharRC(1,8,startAutoParking);
 1fe:	40 91 00 01 	lds	r20, 0x0100
 202:	68 e0       	ldi	r22, 0x08	; 8
 204:	81 e0       	ldi	r24, 0x01	; 1
 206:	bf df       	rcall	.-130    	; 0x186 <LCD_SendCharRC>
 208:	ff 91       	pop	r31
 20a:	ef 91       	pop	r30
 20c:	bf 91       	pop	r27
 20e:	af 91       	pop	r26
 210:	9f 91       	pop	r25
 212:	8f 91       	pop	r24
 214:	7f 91       	pop	r23
 216:	6f 91       	pop	r22
 218:	5f 91       	pop	r21
 21a:	4f 91       	pop	r20
 21c:	3f 91       	pop	r19
 21e:	2f 91       	pop	r18
 220:	0f 90       	pop	r0
 222:	0b be       	out	0x3b, r0	; 59
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <_exit>:
 22e:	f8 94       	cli

00000230 <__stop_program>:
 230:	ff cf       	rjmp	.-2      	; 0x230 <__stop_program>
